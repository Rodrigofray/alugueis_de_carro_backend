
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Carro
 * 
 */
export type Carro = {
  id: number
  modelo: string
  ano: number
  compradorId: number | null
}

/**
 * Model Compra
 * 
 */
export type Compra = {
  id: number
  carroId: number
  compradorId: number
  startDate: Date
  endDate: Date
  status: string
}

/**
 * Model Comprador
 * 
 */
export type Comprador = {
  id: number
  nome: string
  email: string
  contato: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Carros
 * const carros = await prisma.carro.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Carros
   * const carros = await prisma.carro.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.carro`: Exposes CRUD operations for the **Carro** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Carros
    * const carros = await prisma.carro.findMany()
    * ```
    */
  get carro(): Prisma.CarroDelegate<GlobalReject>;

  /**
   * `prisma.compra`: Exposes CRUD operations for the **Compra** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compras
    * const compras = await prisma.compra.findMany()
    * ```
    */
  get compra(): Prisma.CompraDelegate<GlobalReject>;

  /**
   * `prisma.comprador`: Exposes CRUD operations for the **Comprador** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Compradors
    * const compradors = await prisma.comprador.findMany()
    * ```
    */
  get comprador(): Prisma.CompradorDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.11.0
   * Query Engine version: 8fde8fef4033376662cad983758335009d522acb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Carro: 'Carro',
    Compra: 'Compra',
    Comprador: 'Comprador'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CarroCountOutputType
   */


  export type CarroCountOutputType = {
    compras: number
  }

  export type CarroCountOutputTypeSelect = {
    compras?: boolean
  }

  export type CarroCountOutputTypeGetPayload<S extends boolean | null | undefined | CarroCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CarroCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CarroCountOutputTypeArgs)
    ? CarroCountOutputType 
    : S extends { select: any } & (CarroCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CarroCountOutputType ? CarroCountOutputType[P] : never
  } 
      : CarroCountOutputType




  // Custom InputTypes

  /**
   * CarroCountOutputType without action
   */
  export type CarroCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CarroCountOutputType
     */
    select?: CarroCountOutputTypeSelect | null
  }



  /**
   * Count Type CompradorCountOutputType
   */


  export type CompradorCountOutputType = {
    carros: number
    compras: number
  }

  export type CompradorCountOutputTypeSelect = {
    carros?: boolean
    compras?: boolean
  }

  export type CompradorCountOutputTypeGetPayload<S extends boolean | null | undefined | CompradorCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CompradorCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CompradorCountOutputTypeArgs)
    ? CompradorCountOutputType 
    : S extends { select: any } & (CompradorCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CompradorCountOutputType ? CompradorCountOutputType[P] : never
  } 
      : CompradorCountOutputType




  // Custom InputTypes

  /**
   * CompradorCountOutputType without action
   */
  export type CompradorCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CompradorCountOutputType
     */
    select?: CompradorCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Carro
   */


  export type AggregateCarro = {
    _count: CarroCountAggregateOutputType | null
    _avg: CarroAvgAggregateOutputType | null
    _sum: CarroSumAggregateOutputType | null
    _min: CarroMinAggregateOutputType | null
    _max: CarroMaxAggregateOutputType | null
  }

  export type CarroAvgAggregateOutputType = {
    id: number | null
    ano: number | null
    compradorId: number | null
  }

  export type CarroSumAggregateOutputType = {
    id: number | null
    ano: number | null
    compradorId: number | null
  }

  export type CarroMinAggregateOutputType = {
    id: number | null
    modelo: string | null
    ano: number | null
    compradorId: number | null
  }

  export type CarroMaxAggregateOutputType = {
    id: number | null
    modelo: string | null
    ano: number | null
    compradorId: number | null
  }

  export type CarroCountAggregateOutputType = {
    id: number
    modelo: number
    ano: number
    compradorId: number
    _all: number
  }


  export type CarroAvgAggregateInputType = {
    id?: true
    ano?: true
    compradorId?: true
  }

  export type CarroSumAggregateInputType = {
    id?: true
    ano?: true
    compradorId?: true
  }

  export type CarroMinAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    compradorId?: true
  }

  export type CarroMaxAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    compradorId?: true
  }

  export type CarroCountAggregateInputType = {
    id?: true
    modelo?: true
    ano?: true
    compradorId?: true
    _all?: true
  }

  export type CarroAggregateArgs = {
    /**
     * Filter which Carro to aggregate.
     */
    where?: CarroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carros to fetch.
     */
    orderBy?: Enumerable<CarroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CarroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Carros
    **/
    _count?: true | CarroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CarroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CarroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CarroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CarroMaxAggregateInputType
  }

  export type GetCarroAggregateType<T extends CarroAggregateArgs> = {
        [P in keyof T & keyof AggregateCarro]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCarro[P]>
      : GetScalarType<T[P], AggregateCarro[P]>
  }




  export type CarroGroupByArgs = {
    where?: CarroWhereInput
    orderBy?: Enumerable<CarroOrderByWithAggregationInput>
    by: CarroScalarFieldEnum[]
    having?: CarroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CarroCountAggregateInputType | true
    _avg?: CarroAvgAggregateInputType
    _sum?: CarroSumAggregateInputType
    _min?: CarroMinAggregateInputType
    _max?: CarroMaxAggregateInputType
  }


  export type CarroGroupByOutputType = {
    id: number
    modelo: string
    ano: number
    compradorId: number | null
    _count: CarroCountAggregateOutputType | null
    _avg: CarroAvgAggregateOutputType | null
    _sum: CarroSumAggregateOutputType | null
    _min: CarroMinAggregateOutputType | null
    _max: CarroMaxAggregateOutputType | null
  }

  type GetCarroGroupByPayload<T extends CarroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CarroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CarroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CarroGroupByOutputType[P]>
            : GetScalarType<T[P], CarroGroupByOutputType[P]>
        }
      >
    >


  export type CarroSelect = {
    id?: boolean
    modelo?: boolean
    ano?: boolean
    compradorId?: boolean
    comprador?: boolean | CompradorArgs
    compras?: boolean | Carro$comprasArgs
    _count?: boolean | CarroCountOutputTypeArgs
  }


  export type CarroInclude = {
    comprador?: boolean | CompradorArgs
    compras?: boolean | Carro$comprasArgs
    _count?: boolean | CarroCountOutputTypeArgs
  }

  export type CarroGetPayload<S extends boolean | null | undefined | CarroArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Carro :
    S extends undefined ? never :
    S extends { include: any } & (CarroArgs | CarroFindManyArgs)
    ? Carro  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'comprador' ? CompradorGetPayload<S['include'][P]> | null :
        P extends 'compras' ? Array < CompraGetPayload<S['include'][P]>>  :
        P extends '_count' ? CarroCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CarroArgs | CarroFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'comprador' ? CompradorGetPayload<S['select'][P]> | null :
        P extends 'compras' ? Array < CompraGetPayload<S['select'][P]>>  :
        P extends '_count' ? CarroCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Carro ? Carro[P] : never
  } 
      : Carro


  type CarroCountArgs = 
    Omit<CarroFindManyArgs, 'select' | 'include'> & {
      select?: CarroCountAggregateInputType | true
    }

  export interface CarroDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Carro that matches the filter.
     * @param {CarroFindUniqueArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CarroFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CarroFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Carro'> extends True ? Prisma__CarroClient<CarroGetPayload<T>> : Prisma__CarroClient<CarroGetPayload<T> | null, null>

    /**
     * Find one Carro that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CarroFindUniqueOrThrowArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CarroFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CarroFindUniqueOrThrowArgs>
    ): Prisma__CarroClient<CarroGetPayload<T>>

    /**
     * Find the first Carro that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroFindFirstArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CarroFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CarroFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Carro'> extends True ? Prisma__CarroClient<CarroGetPayload<T>> : Prisma__CarroClient<CarroGetPayload<T> | null, null>

    /**
     * Find the first Carro that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroFindFirstOrThrowArgs} args - Arguments to find a Carro
     * @example
     * // Get one Carro
     * const carro = await prisma.carro.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CarroFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CarroFindFirstOrThrowArgs>
    ): Prisma__CarroClient<CarroGetPayload<T>>

    /**
     * Find zero or more Carros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Carros
     * const carros = await prisma.carro.findMany()
     * 
     * // Get first 10 Carros
     * const carros = await prisma.carro.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const carroWithIdOnly = await prisma.carro.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CarroFindManyArgs>(
      args?: SelectSubset<T, CarroFindManyArgs>
    ): Prisma.PrismaPromise<Array<CarroGetPayload<T>>>

    /**
     * Create a Carro.
     * @param {CarroCreateArgs} args - Arguments to create a Carro.
     * @example
     * // Create one Carro
     * const Carro = await prisma.carro.create({
     *   data: {
     *     // ... data to create a Carro
     *   }
     * })
     * 
    **/
    create<T extends CarroCreateArgs>(
      args: SelectSubset<T, CarroCreateArgs>
    ): Prisma__CarroClient<CarroGetPayload<T>>

    /**
     * Delete a Carro.
     * @param {CarroDeleteArgs} args - Arguments to delete one Carro.
     * @example
     * // Delete one Carro
     * const Carro = await prisma.carro.delete({
     *   where: {
     *     // ... filter to delete one Carro
     *   }
     * })
     * 
    **/
    delete<T extends CarroDeleteArgs>(
      args: SelectSubset<T, CarroDeleteArgs>
    ): Prisma__CarroClient<CarroGetPayload<T>>

    /**
     * Update one Carro.
     * @param {CarroUpdateArgs} args - Arguments to update one Carro.
     * @example
     * // Update one Carro
     * const carro = await prisma.carro.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CarroUpdateArgs>(
      args: SelectSubset<T, CarroUpdateArgs>
    ): Prisma__CarroClient<CarroGetPayload<T>>

    /**
     * Delete zero or more Carros.
     * @param {CarroDeleteManyArgs} args - Arguments to filter Carros to delete.
     * @example
     * // Delete a few Carros
     * const { count } = await prisma.carro.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CarroDeleteManyArgs>(
      args?: SelectSubset<T, CarroDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Carros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Carros
     * const carro = await prisma.carro.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CarroUpdateManyArgs>(
      args: SelectSubset<T, CarroUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Carro.
     * @param {CarroUpsertArgs} args - Arguments to update or create a Carro.
     * @example
     * // Update or create a Carro
     * const carro = await prisma.carro.upsert({
     *   create: {
     *     // ... data to create a Carro
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Carro we want to update
     *   }
     * })
    **/
    upsert<T extends CarroUpsertArgs>(
      args: SelectSubset<T, CarroUpsertArgs>
    ): Prisma__CarroClient<CarroGetPayload<T>>

    /**
     * Count the number of Carros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroCountArgs} args - Arguments to filter Carros to count.
     * @example
     * // Count the number of Carros
     * const count = await prisma.carro.count({
     *   where: {
     *     // ... the filter for the Carros we want to count
     *   }
     * })
    **/
    count<T extends CarroCountArgs>(
      args?: Subset<T, CarroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CarroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Carro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CarroAggregateArgs>(args: Subset<T, CarroAggregateArgs>): Prisma.PrismaPromise<GetCarroAggregateType<T>>

    /**
     * Group by Carro.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CarroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CarroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CarroGroupByArgs['orderBy'] }
        : { orderBy?: CarroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CarroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCarroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Carro.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CarroClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    comprador<T extends CompradorArgs= {}>(args?: Subset<T, CompradorArgs>): Prisma__CompradorClient<CompradorGetPayload<T> | Null>;

    compras<T extends Carro$comprasArgs= {}>(args?: Subset<T, Carro$comprasArgs>): Prisma.PrismaPromise<Array<CompraGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Carro base type for findUnique actions
   */
  export type CarroFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * Filter, which Carro to fetch.
     */
    where: CarroWhereUniqueInput
  }

  /**
   * Carro findUnique
   */
  export interface CarroFindUniqueArgs extends CarroFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Carro findUniqueOrThrow
   */
  export type CarroFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * Filter, which Carro to fetch.
     */
    where: CarroWhereUniqueInput
  }


  /**
   * Carro base type for findFirst actions
   */
  export type CarroFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * Filter, which Carro to fetch.
     */
    where?: CarroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carros to fetch.
     */
    orderBy?: Enumerable<CarroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carros.
     */
    cursor?: CarroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carros.
     */
    distinct?: Enumerable<CarroScalarFieldEnum>
  }

  /**
   * Carro findFirst
   */
  export interface CarroFindFirstArgs extends CarroFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Carro findFirstOrThrow
   */
  export type CarroFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * Filter, which Carro to fetch.
     */
    where?: CarroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carros to fetch.
     */
    orderBy?: Enumerable<CarroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Carros.
     */
    cursor?: CarroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Carros.
     */
    distinct?: Enumerable<CarroScalarFieldEnum>
  }


  /**
   * Carro findMany
   */
  export type CarroFindManyArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * Filter, which Carros to fetch.
     */
    where?: CarroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Carros to fetch.
     */
    orderBy?: Enumerable<CarroOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Carros.
     */
    cursor?: CarroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Carros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Carros.
     */
    skip?: number
    distinct?: Enumerable<CarroScalarFieldEnum>
  }


  /**
   * Carro create
   */
  export type CarroCreateArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * The data needed to create a Carro.
     */
    data: XOR<CarroCreateInput, CarroUncheckedCreateInput>
  }


  /**
   * Carro update
   */
  export type CarroUpdateArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * The data needed to update a Carro.
     */
    data: XOR<CarroUpdateInput, CarroUncheckedUpdateInput>
    /**
     * Choose, which Carro to update.
     */
    where: CarroWhereUniqueInput
  }


  /**
   * Carro updateMany
   */
  export type CarroUpdateManyArgs = {
    /**
     * The data used to update Carros.
     */
    data: XOR<CarroUpdateManyMutationInput, CarroUncheckedUpdateManyInput>
    /**
     * Filter which Carros to update
     */
    where?: CarroWhereInput
  }


  /**
   * Carro upsert
   */
  export type CarroUpsertArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * The filter to search for the Carro to update in case it exists.
     */
    where: CarroWhereUniqueInput
    /**
     * In case the Carro found by the `where` argument doesn't exist, create a new Carro with this data.
     */
    create: XOR<CarroCreateInput, CarroUncheckedCreateInput>
    /**
     * In case the Carro was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CarroUpdateInput, CarroUncheckedUpdateInput>
  }


  /**
   * Carro delete
   */
  export type CarroDeleteArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    /**
     * Filter which Carro to delete.
     */
    where: CarroWhereUniqueInput
  }


  /**
   * Carro deleteMany
   */
  export type CarroDeleteManyArgs = {
    /**
     * Filter which Carros to delete
     */
    where?: CarroWhereInput
  }


  /**
   * Carro.compras
   */
  export type Carro$comprasArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    where?: CompraWhereInput
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    cursor?: CompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Carro without action
   */
  export type CarroArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
  }



  /**
   * Model Compra
   */


  export type AggregateCompra = {
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  export type CompraAvgAggregateOutputType = {
    id: number | null
    carroId: number | null
    compradorId: number | null
  }

  export type CompraSumAggregateOutputType = {
    id: number | null
    carroId: number | null
    compradorId: number | null
  }

  export type CompraMinAggregateOutputType = {
    id: number | null
    carroId: number | null
    compradorId: number | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
  }

  export type CompraMaxAggregateOutputType = {
    id: number | null
    carroId: number | null
    compradorId: number | null
    startDate: Date | null
    endDate: Date | null
    status: string | null
  }

  export type CompraCountAggregateOutputType = {
    id: number
    carroId: number
    compradorId: number
    startDate: number
    endDate: number
    status: number
    _all: number
  }


  export type CompraAvgAggregateInputType = {
    id?: true
    carroId?: true
    compradorId?: true
  }

  export type CompraSumAggregateInputType = {
    id?: true
    carroId?: true
    compradorId?: true
  }

  export type CompraMinAggregateInputType = {
    id?: true
    carroId?: true
    compradorId?: true
    startDate?: true
    endDate?: true
    status?: true
  }

  export type CompraMaxAggregateInputType = {
    id?: true
    carroId?: true
    compradorId?: true
    startDate?: true
    endDate?: true
    status?: true
  }

  export type CompraCountAggregateInputType = {
    id?: true
    carroId?: true
    compradorId?: true
    startDate?: true
    endDate?: true
    status?: true
    _all?: true
  }

  export type CompraAggregateArgs = {
    /**
     * Filter which Compra to aggregate.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compras
    **/
    _count?: true | CompraCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompraAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompraSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompraMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompraMaxAggregateInputType
  }

  export type GetCompraAggregateType<T extends CompraAggregateArgs> = {
        [P in keyof T & keyof AggregateCompra]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompra[P]>
      : GetScalarType<T[P], AggregateCompra[P]>
  }




  export type CompraGroupByArgs = {
    where?: CompraWhereInput
    orderBy?: Enumerable<CompraOrderByWithAggregationInput>
    by: CompraScalarFieldEnum[]
    having?: CompraScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompraCountAggregateInputType | true
    _avg?: CompraAvgAggregateInputType
    _sum?: CompraSumAggregateInputType
    _min?: CompraMinAggregateInputType
    _max?: CompraMaxAggregateInputType
  }


  export type CompraGroupByOutputType = {
    id: number
    carroId: number
    compradorId: number
    startDate: Date
    endDate: Date
    status: string
    _count: CompraCountAggregateOutputType | null
    _avg: CompraAvgAggregateOutputType | null
    _sum: CompraSumAggregateOutputType | null
    _min: CompraMinAggregateOutputType | null
    _max: CompraMaxAggregateOutputType | null
  }

  type GetCompraGroupByPayload<T extends CompraGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompraGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompraGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompraGroupByOutputType[P]>
            : GetScalarType<T[P], CompraGroupByOutputType[P]>
        }
      >
    >


  export type CompraSelect = {
    id?: boolean
    carroId?: boolean
    compradorId?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    carro?: boolean | CarroArgs
    comprador?: boolean | CompradorArgs
  }


  export type CompraInclude = {
    carro?: boolean | CarroArgs
    comprador?: boolean | CompradorArgs
  }

  export type CompraGetPayload<S extends boolean | null | undefined | CompraArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Compra :
    S extends undefined ? never :
    S extends { include: any } & (CompraArgs | CompraFindManyArgs)
    ? Compra  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'carro' ? CarroGetPayload<S['include'][P]> :
        P extends 'comprador' ? CompradorGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompraArgs | CompraFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'carro' ? CarroGetPayload<S['select'][P]> :
        P extends 'comprador' ? CompradorGetPayload<S['select'][P]> :  P extends keyof Compra ? Compra[P] : never
  } 
      : Compra


  type CompraCountArgs = 
    Omit<CompraFindManyArgs, 'select' | 'include'> & {
      select?: CompraCountAggregateInputType | true
    }

  export interface CompraDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Compra that matches the filter.
     * @param {CompraFindUniqueArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompraFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompraFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Compra'> extends True ? Prisma__CompraClient<CompraGetPayload<T>> : Prisma__CompraClient<CompraGetPayload<T> | null, null>

    /**
     * Find one Compra that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompraFindUniqueOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompraFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompraFindUniqueOrThrowArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Find the first Compra that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompraFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompraFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Compra'> extends True ? Prisma__CompraClient<CompraGetPayload<T>> : Prisma__CompraClient<CompraGetPayload<T> | null, null>

    /**
     * Find the first Compra that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindFirstOrThrowArgs} args - Arguments to find a Compra
     * @example
     * // Get one Compra
     * const compra = await prisma.compra.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompraFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompraFindFirstOrThrowArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Find zero or more Compras that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compras
     * const compras = await prisma.compra.findMany()
     * 
     * // Get first 10 Compras
     * const compras = await prisma.compra.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compraWithIdOnly = await prisma.compra.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompraFindManyArgs>(
      args?: SelectSubset<T, CompraFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompraGetPayload<T>>>

    /**
     * Create a Compra.
     * @param {CompraCreateArgs} args - Arguments to create a Compra.
     * @example
     * // Create one Compra
     * const Compra = await prisma.compra.create({
     *   data: {
     *     // ... data to create a Compra
     *   }
     * })
     * 
    **/
    create<T extends CompraCreateArgs>(
      args: SelectSubset<T, CompraCreateArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Delete a Compra.
     * @param {CompraDeleteArgs} args - Arguments to delete one Compra.
     * @example
     * // Delete one Compra
     * const Compra = await prisma.compra.delete({
     *   where: {
     *     // ... filter to delete one Compra
     *   }
     * })
     * 
    **/
    delete<T extends CompraDeleteArgs>(
      args: SelectSubset<T, CompraDeleteArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Update one Compra.
     * @param {CompraUpdateArgs} args - Arguments to update one Compra.
     * @example
     * // Update one Compra
     * const compra = await prisma.compra.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompraUpdateArgs>(
      args: SelectSubset<T, CompraUpdateArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Delete zero or more Compras.
     * @param {CompraDeleteManyArgs} args - Arguments to filter Compras to delete.
     * @example
     * // Delete a few Compras
     * const { count } = await prisma.compra.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompraDeleteManyArgs>(
      args?: SelectSubset<T, CompraDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compras
     * const compra = await prisma.compra.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompraUpdateManyArgs>(
      args: SelectSubset<T, CompraUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Compra.
     * @param {CompraUpsertArgs} args - Arguments to update or create a Compra.
     * @example
     * // Update or create a Compra
     * const compra = await prisma.compra.upsert({
     *   create: {
     *     // ... data to create a Compra
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Compra we want to update
     *   }
     * })
    **/
    upsert<T extends CompraUpsertArgs>(
      args: SelectSubset<T, CompraUpsertArgs>
    ): Prisma__CompraClient<CompraGetPayload<T>>

    /**
     * Count the number of Compras.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraCountArgs} args - Arguments to filter Compras to count.
     * @example
     * // Count the number of Compras
     * const count = await prisma.compra.count({
     *   where: {
     *     // ... the filter for the Compras we want to count
     *   }
     * })
    **/
    count<T extends CompraCountArgs>(
      args?: Subset<T, CompraCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompraCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompraAggregateArgs>(args: Subset<T, CompraAggregateArgs>): Prisma.PrismaPromise<GetCompraAggregateType<T>>

    /**
     * Group by Compra.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompraGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompraGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompraGroupByArgs['orderBy'] }
        : { orderBy?: CompraGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompraGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompraGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Compra.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompraClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    carro<T extends CarroArgs= {}>(args?: Subset<T, CarroArgs>): Prisma__CarroClient<CarroGetPayload<T> | Null>;

    comprador<T extends CompradorArgs= {}>(args?: Subset<T, CompradorArgs>): Prisma__CompradorClient<CompradorGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Compra base type for findUnique actions
   */
  export type CompraFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }

  /**
   * Compra findUnique
   */
  export interface CompraFindUniqueArgs extends CompraFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra findUniqueOrThrow
   */
  export type CompraFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra base type for findFirst actions
   */
  export type CompraFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: Enumerable<CompraScalarFieldEnum>
  }

  /**
   * Compra findFirst
   */
  export interface CompraFindFirstArgs extends CompraFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Compra findFirstOrThrow
   */
  export type CompraFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compra to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compras.
     */
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Compra findMany
   */
  export type CompraFindManyArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter, which Compras to fetch.
     */
    where?: CompraWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compras to fetch.
     */
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compras.
     */
    cursor?: CompraWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compras from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compras.
     */
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Compra create
   */
  export type CompraCreateArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The data needed to create a Compra.
     */
    data: XOR<CompraCreateInput, CompraUncheckedCreateInput>
  }


  /**
   * Compra update
   */
  export type CompraUpdateArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The data needed to update a Compra.
     */
    data: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
    /**
     * Choose, which Compra to update.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra updateMany
   */
  export type CompraUpdateManyArgs = {
    /**
     * The data used to update Compras.
     */
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyInput>
    /**
     * Filter which Compras to update
     */
    where?: CompraWhereInput
  }


  /**
   * Compra upsert
   */
  export type CompraUpsertArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * The filter to search for the Compra to update in case it exists.
     */
    where: CompraWhereUniqueInput
    /**
     * In case the Compra found by the `where` argument doesn't exist, create a new Compra with this data.
     */
    create: XOR<CompraCreateInput, CompraUncheckedCreateInput>
    /**
     * In case the Compra was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompraUpdateInput, CompraUncheckedUpdateInput>
  }


  /**
   * Compra delete
   */
  export type CompraDeleteArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    /**
     * Filter which Compra to delete.
     */
    where: CompraWhereUniqueInput
  }


  /**
   * Compra deleteMany
   */
  export type CompraDeleteManyArgs = {
    /**
     * Filter which Compras to delete
     */
    where?: CompraWhereInput
  }


  /**
   * Compra without action
   */
  export type CompraArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
  }



  /**
   * Model Comprador
   */


  export type AggregateComprador = {
    _count: CompradorCountAggregateOutputType | null
    _avg: CompradorAvgAggregateOutputType | null
    _sum: CompradorSumAggregateOutputType | null
    _min: CompradorMinAggregateOutputType | null
    _max: CompradorMaxAggregateOutputType | null
  }

  export type CompradorAvgAggregateOutputType = {
    id: number | null
  }

  export type CompradorSumAggregateOutputType = {
    id: number | null
  }

  export type CompradorMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    contato: string | null
  }

  export type CompradorMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    contato: string | null
  }

  export type CompradorCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    contato: number
    _all: number
  }


  export type CompradorAvgAggregateInputType = {
    id?: true
  }

  export type CompradorSumAggregateInputType = {
    id?: true
  }

  export type CompradorMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    contato?: true
  }

  export type CompradorMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    contato?: true
  }

  export type CompradorCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    contato?: true
    _all?: true
  }

  export type CompradorAggregateArgs = {
    /**
     * Filter which Comprador to aggregate.
     */
    where?: CompradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compradors to fetch.
     */
    orderBy?: Enumerable<CompradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Compradors
    **/
    _count?: true | CompradorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompradorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompradorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompradorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompradorMaxAggregateInputType
  }

  export type GetCompradorAggregateType<T extends CompradorAggregateArgs> = {
        [P in keyof T & keyof AggregateComprador]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComprador[P]>
      : GetScalarType<T[P], AggregateComprador[P]>
  }




  export type CompradorGroupByArgs = {
    where?: CompradorWhereInput
    orderBy?: Enumerable<CompradorOrderByWithAggregationInput>
    by: CompradorScalarFieldEnum[]
    having?: CompradorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompradorCountAggregateInputType | true
    _avg?: CompradorAvgAggregateInputType
    _sum?: CompradorSumAggregateInputType
    _min?: CompradorMinAggregateInputType
    _max?: CompradorMaxAggregateInputType
  }


  export type CompradorGroupByOutputType = {
    id: number
    nome: string
    email: string
    contato: string
    _count: CompradorCountAggregateOutputType | null
    _avg: CompradorAvgAggregateOutputType | null
    _sum: CompradorSumAggregateOutputType | null
    _min: CompradorMinAggregateOutputType | null
    _max: CompradorMaxAggregateOutputType | null
  }

  type GetCompradorGroupByPayload<T extends CompradorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<CompradorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompradorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompradorGroupByOutputType[P]>
            : GetScalarType<T[P], CompradorGroupByOutputType[P]>
        }
      >
    >


  export type CompradorSelect = {
    id?: boolean
    nome?: boolean
    email?: boolean
    contato?: boolean
    carros?: boolean | Comprador$carrosArgs
    compras?: boolean | Comprador$comprasArgs
    _count?: boolean | CompradorCountOutputTypeArgs
  }


  export type CompradorInclude = {
    carros?: boolean | Comprador$carrosArgs
    compras?: boolean | Comprador$comprasArgs
    _count?: boolean | CompradorCountOutputTypeArgs
  }

  export type CompradorGetPayload<S extends boolean | null | undefined | CompradorArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Comprador :
    S extends undefined ? never :
    S extends { include: any } & (CompradorArgs | CompradorFindManyArgs)
    ? Comprador  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'carros' ? Array < CarroGetPayload<S['include'][P]>>  :
        P extends 'compras' ? Array < CompraGetPayload<S['include'][P]>>  :
        P extends '_count' ? CompradorCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CompradorArgs | CompradorFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'carros' ? Array < CarroGetPayload<S['select'][P]>>  :
        P extends 'compras' ? Array < CompraGetPayload<S['select'][P]>>  :
        P extends '_count' ? CompradorCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Comprador ? Comprador[P] : never
  } 
      : Comprador


  type CompradorCountArgs = 
    Omit<CompradorFindManyArgs, 'select' | 'include'> & {
      select?: CompradorCountAggregateInputType | true
    }

  export interface CompradorDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Comprador that matches the filter.
     * @param {CompradorFindUniqueArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CompradorFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CompradorFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Comprador'> extends True ? Prisma__CompradorClient<CompradorGetPayload<T>> : Prisma__CompradorClient<CompradorGetPayload<T> | null, null>

    /**
     * Find one Comprador that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CompradorFindUniqueOrThrowArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CompradorFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CompradorFindUniqueOrThrowArgs>
    ): Prisma__CompradorClient<CompradorGetPayload<T>>

    /**
     * Find the first Comprador that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorFindFirstArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CompradorFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CompradorFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Comprador'> extends True ? Prisma__CompradorClient<CompradorGetPayload<T>> : Prisma__CompradorClient<CompradorGetPayload<T> | null, null>

    /**
     * Find the first Comprador that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorFindFirstOrThrowArgs} args - Arguments to find a Comprador
     * @example
     * // Get one Comprador
     * const comprador = await prisma.comprador.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CompradorFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CompradorFindFirstOrThrowArgs>
    ): Prisma__CompradorClient<CompradorGetPayload<T>>

    /**
     * Find zero or more Compradors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Compradors
     * const compradors = await prisma.comprador.findMany()
     * 
     * // Get first 10 Compradors
     * const compradors = await prisma.comprador.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const compradorWithIdOnly = await prisma.comprador.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CompradorFindManyArgs>(
      args?: SelectSubset<T, CompradorFindManyArgs>
    ): Prisma.PrismaPromise<Array<CompradorGetPayload<T>>>

    /**
     * Create a Comprador.
     * @param {CompradorCreateArgs} args - Arguments to create a Comprador.
     * @example
     * // Create one Comprador
     * const Comprador = await prisma.comprador.create({
     *   data: {
     *     // ... data to create a Comprador
     *   }
     * })
     * 
    **/
    create<T extends CompradorCreateArgs>(
      args: SelectSubset<T, CompradorCreateArgs>
    ): Prisma__CompradorClient<CompradorGetPayload<T>>

    /**
     * Delete a Comprador.
     * @param {CompradorDeleteArgs} args - Arguments to delete one Comprador.
     * @example
     * // Delete one Comprador
     * const Comprador = await prisma.comprador.delete({
     *   where: {
     *     // ... filter to delete one Comprador
     *   }
     * })
     * 
    **/
    delete<T extends CompradorDeleteArgs>(
      args: SelectSubset<T, CompradorDeleteArgs>
    ): Prisma__CompradorClient<CompradorGetPayload<T>>

    /**
     * Update one Comprador.
     * @param {CompradorUpdateArgs} args - Arguments to update one Comprador.
     * @example
     * // Update one Comprador
     * const comprador = await prisma.comprador.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CompradorUpdateArgs>(
      args: SelectSubset<T, CompradorUpdateArgs>
    ): Prisma__CompradorClient<CompradorGetPayload<T>>

    /**
     * Delete zero or more Compradors.
     * @param {CompradorDeleteManyArgs} args - Arguments to filter Compradors to delete.
     * @example
     * // Delete a few Compradors
     * const { count } = await prisma.comprador.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CompradorDeleteManyArgs>(
      args?: SelectSubset<T, CompradorDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Compradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Compradors
     * const comprador = await prisma.comprador.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CompradorUpdateManyArgs>(
      args: SelectSubset<T, CompradorUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comprador.
     * @param {CompradorUpsertArgs} args - Arguments to update or create a Comprador.
     * @example
     * // Update or create a Comprador
     * const comprador = await prisma.comprador.upsert({
     *   create: {
     *     // ... data to create a Comprador
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comprador we want to update
     *   }
     * })
    **/
    upsert<T extends CompradorUpsertArgs>(
      args: SelectSubset<T, CompradorUpsertArgs>
    ): Prisma__CompradorClient<CompradorGetPayload<T>>

    /**
     * Count the number of Compradors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorCountArgs} args - Arguments to filter Compradors to count.
     * @example
     * // Count the number of Compradors
     * const count = await prisma.comprador.count({
     *   where: {
     *     // ... the filter for the Compradors we want to count
     *   }
     * })
    **/
    count<T extends CompradorCountArgs>(
      args?: Subset<T, CompradorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompradorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comprador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompradorAggregateArgs>(args: Subset<T, CompradorAggregateArgs>): Prisma.PrismaPromise<GetCompradorAggregateType<T>>

    /**
     * Group by Comprador.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompradorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompradorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompradorGroupByArgs['orderBy'] }
        : { orderBy?: CompradorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompradorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompradorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Comprador.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CompradorClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    carros<T extends Comprador$carrosArgs= {}>(args?: Subset<T, Comprador$carrosArgs>): Prisma.PrismaPromise<Array<CarroGetPayload<T>>| Null>;

    compras<T extends Comprador$comprasArgs= {}>(args?: Subset<T, Comprador$comprasArgs>): Prisma.PrismaPromise<Array<CompraGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Comprador base type for findUnique actions
   */
  export type CompradorFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * Filter, which Comprador to fetch.
     */
    where: CompradorWhereUniqueInput
  }

  /**
   * Comprador findUnique
   */
  export interface CompradorFindUniqueArgs extends CompradorFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comprador findUniqueOrThrow
   */
  export type CompradorFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * Filter, which Comprador to fetch.
     */
    where: CompradorWhereUniqueInput
  }


  /**
   * Comprador base type for findFirst actions
   */
  export type CompradorFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * Filter, which Comprador to fetch.
     */
    where?: CompradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compradors to fetch.
     */
    orderBy?: Enumerable<CompradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compradors.
     */
    cursor?: CompradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compradors.
     */
    distinct?: Enumerable<CompradorScalarFieldEnum>
  }

  /**
   * Comprador findFirst
   */
  export interface CompradorFindFirstArgs extends CompradorFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Comprador findFirstOrThrow
   */
  export type CompradorFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * Filter, which Comprador to fetch.
     */
    where?: CompradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compradors to fetch.
     */
    orderBy?: Enumerable<CompradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Compradors.
     */
    cursor?: CompradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compradors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Compradors.
     */
    distinct?: Enumerable<CompradorScalarFieldEnum>
  }


  /**
   * Comprador findMany
   */
  export type CompradorFindManyArgs = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * Filter, which Compradors to fetch.
     */
    where?: CompradorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Compradors to fetch.
     */
    orderBy?: Enumerable<CompradorOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Compradors.
     */
    cursor?: CompradorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Compradors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Compradors.
     */
    skip?: number
    distinct?: Enumerable<CompradorScalarFieldEnum>
  }


  /**
   * Comprador create
   */
  export type CompradorCreateArgs = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * The data needed to create a Comprador.
     */
    data: XOR<CompradorCreateInput, CompradorUncheckedCreateInput>
  }


  /**
   * Comprador update
   */
  export type CompradorUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * The data needed to update a Comprador.
     */
    data: XOR<CompradorUpdateInput, CompradorUncheckedUpdateInput>
    /**
     * Choose, which Comprador to update.
     */
    where: CompradorWhereUniqueInput
  }


  /**
   * Comprador updateMany
   */
  export type CompradorUpdateManyArgs = {
    /**
     * The data used to update Compradors.
     */
    data: XOR<CompradorUpdateManyMutationInput, CompradorUncheckedUpdateManyInput>
    /**
     * Filter which Compradors to update
     */
    where?: CompradorWhereInput
  }


  /**
   * Comprador upsert
   */
  export type CompradorUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * The filter to search for the Comprador to update in case it exists.
     */
    where: CompradorWhereUniqueInput
    /**
     * In case the Comprador found by the `where` argument doesn't exist, create a new Comprador with this data.
     */
    create: XOR<CompradorCreateInput, CompradorUncheckedCreateInput>
    /**
     * In case the Comprador was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompradorUpdateInput, CompradorUncheckedUpdateInput>
  }


  /**
   * Comprador delete
   */
  export type CompradorDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
    /**
     * Filter which Comprador to delete.
     */
    where: CompradorWhereUniqueInput
  }


  /**
   * Comprador deleteMany
   */
  export type CompradorDeleteManyArgs = {
    /**
     * Filter which Compradors to delete
     */
    where?: CompradorWhereInput
  }


  /**
   * Comprador.carros
   */
  export type Comprador$carrosArgs = {
    /**
     * Select specific fields to fetch from the Carro
     */
    select?: CarroSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CarroInclude | null
    where?: CarroWhereInput
    orderBy?: Enumerable<CarroOrderByWithRelationInput>
    cursor?: CarroWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CarroScalarFieldEnum>
  }


  /**
   * Comprador.compras
   */
  export type Comprador$comprasArgs = {
    /**
     * Select specific fields to fetch from the Compra
     */
    select?: CompraSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompraInclude | null
    where?: CompraWhereInput
    orderBy?: Enumerable<CompraOrderByWithRelationInput>
    cursor?: CompraWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<CompraScalarFieldEnum>
  }


  /**
   * Comprador without action
   */
  export type CompradorArgs = {
    /**
     * Select specific fields to fetch from the Comprador
     */
    select?: CompradorSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CompradorInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const CarroScalarFieldEnum: {
    id: 'id',
    modelo: 'modelo',
    ano: 'ano',
    compradorId: 'compradorId'
  };

  export type CarroScalarFieldEnum = (typeof CarroScalarFieldEnum)[keyof typeof CarroScalarFieldEnum]


  export const CompraScalarFieldEnum: {
    id: 'id',
    carroId: 'carroId',
    compradorId: 'compradorId',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status'
  };

  export type CompraScalarFieldEnum = (typeof CompraScalarFieldEnum)[keyof typeof CompraScalarFieldEnum]


  export const CompradorScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    contato: 'contato'
  };

  export type CompradorScalarFieldEnum = (typeof CompradorScalarFieldEnum)[keyof typeof CompradorScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type CarroWhereInput = {
    AND?: Enumerable<CarroWhereInput>
    OR?: Enumerable<CarroWhereInput>
    NOT?: Enumerable<CarroWhereInput>
    id?: IntFilter | number
    modelo?: StringFilter | string
    ano?: IntFilter | number
    compradorId?: IntNullableFilter | number | null
    comprador?: XOR<CompradorRelationFilter, CompradorWhereInput> | null
    compras?: CompraListRelationFilter
  }

  export type CarroOrderByWithRelationInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    compradorId?: SortOrder
    comprador?: CompradorOrderByWithRelationInput
    compras?: CompraOrderByRelationAggregateInput
  }

  export type CarroWhereUniqueInput = {
    id?: number
  }

  export type CarroOrderByWithAggregationInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    compradorId?: SortOrder
    _count?: CarroCountOrderByAggregateInput
    _avg?: CarroAvgOrderByAggregateInput
    _max?: CarroMaxOrderByAggregateInput
    _min?: CarroMinOrderByAggregateInput
    _sum?: CarroSumOrderByAggregateInput
  }

  export type CarroScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CarroScalarWhereWithAggregatesInput>
    OR?: Enumerable<CarroScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CarroScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    modelo?: StringWithAggregatesFilter | string
    ano?: IntWithAggregatesFilter | number
    compradorId?: IntNullableWithAggregatesFilter | number | null
  }

  export type CompraWhereInput = {
    AND?: Enumerable<CompraWhereInput>
    OR?: Enumerable<CompraWhereInput>
    NOT?: Enumerable<CompraWhereInput>
    id?: IntFilter | number
    carroId?: IntFilter | number
    compradorId?: IntFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    status?: StringFilter | string
    carro?: XOR<CarroRelationFilter, CarroWhereInput>
    comprador?: XOR<CompradorRelationFilter, CompradorWhereInput>
  }

  export type CompraOrderByWithRelationInput = {
    id?: SortOrder
    carroId?: SortOrder
    compradorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    carro?: CarroOrderByWithRelationInput
    comprador?: CompradorOrderByWithRelationInput
  }

  export type CompraWhereUniqueInput = {
    id?: number
  }

  export type CompraOrderByWithAggregationInput = {
    id?: SortOrder
    carroId?: SortOrder
    compradorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    _count?: CompraCountOrderByAggregateInput
    _avg?: CompraAvgOrderByAggregateInput
    _max?: CompraMaxOrderByAggregateInput
    _min?: CompraMinOrderByAggregateInput
    _sum?: CompraSumOrderByAggregateInput
  }

  export type CompraScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompraScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompraScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompraScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    carroId?: IntWithAggregatesFilter | number
    compradorId?: IntWithAggregatesFilter | number
    startDate?: DateTimeWithAggregatesFilter | Date | string
    endDate?: DateTimeWithAggregatesFilter | Date | string
    status?: StringWithAggregatesFilter | string
  }

  export type CompradorWhereInput = {
    AND?: Enumerable<CompradorWhereInput>
    OR?: Enumerable<CompradorWhereInput>
    NOT?: Enumerable<CompradorWhereInput>
    id?: IntFilter | number
    nome?: StringFilter | string
    email?: StringFilter | string
    contato?: StringFilter | string
    carros?: CarroListRelationFilter
    compras?: CompraListRelationFilter
  }

  export type CompradorOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    contato?: SortOrder
    carros?: CarroOrderByRelationAggregateInput
    compras?: CompraOrderByRelationAggregateInput
  }

  export type CompradorWhereUniqueInput = {
    id?: number
  }

  export type CompradorOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    contato?: SortOrder
    _count?: CompradorCountOrderByAggregateInput
    _avg?: CompradorAvgOrderByAggregateInput
    _max?: CompradorMaxOrderByAggregateInput
    _min?: CompradorMinOrderByAggregateInput
    _sum?: CompradorSumOrderByAggregateInput
  }

  export type CompradorScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CompradorScalarWhereWithAggregatesInput>
    OR?: Enumerable<CompradorScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CompradorScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    nome?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    contato?: StringWithAggregatesFilter | string
  }

  export type CarroCreateInput = {
    modelo: string
    ano: number
    comprador?: CompradorCreateNestedOneWithoutCarrosInput
    compras?: CompraCreateNestedManyWithoutCarroInput
  }

  export type CarroUncheckedCreateInput = {
    id?: number
    modelo: string
    ano: number
    compradorId?: number | null
    compras?: CompraUncheckedCreateNestedManyWithoutCarroInput
  }

  export type CarroUpdateInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    comprador?: CompradorUpdateOneWithoutCarrosNestedInput
    compras?: CompraUpdateManyWithoutCarroNestedInput
  }

  export type CarroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    compradorId?: NullableIntFieldUpdateOperationsInput | number | null
    compras?: CompraUncheckedUpdateManyWithoutCarroNestedInput
  }

  export type CarroUpdateManyMutationInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
  }

  export type CarroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    compradorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CompraCreateInput = {
    startDate: Date | string
    endDate: Date | string
    status: string
    carro: CarroCreateNestedOneWithoutComprasInput
    comprador: CompradorCreateNestedOneWithoutComprasInput
  }

  export type CompraUncheckedCreateInput = {
    id?: number
    carroId: number
    compradorId: number
    startDate: Date | string
    endDate: Date | string
    status: string
  }

  export type CompraUpdateInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    carro?: CarroUpdateOneRequiredWithoutComprasNestedInput
    comprador?: CompradorUpdateOneRequiredWithoutComprasNestedInput
  }

  export type CompraUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    carroId?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CompraUpdateManyMutationInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CompraUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    carroId?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CompradorCreateInput = {
    nome: string
    email: string
    contato: string
    carros?: CarroCreateNestedManyWithoutCompradorInput
    compras?: CompraCreateNestedManyWithoutCompradorInput
  }

  export type CompradorUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    contato: string
    carros?: CarroUncheckedCreateNestedManyWithoutCompradorInput
    compras?: CompraUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type CompradorUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    carros?: CarroUpdateManyWithoutCompradorNestedInput
    compras?: CompraUpdateManyWithoutCompradorNestedInput
  }

  export type CompradorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    carros?: CarroUncheckedUpdateManyWithoutCompradorNestedInput
    compras?: CompraUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type CompradorUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
  }

  export type CompradorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CompradorRelationFilter = {
    is?: CompradorWhereInput | null
    isNot?: CompradorWhereInput | null
  }

  export type CompraListRelationFilter = {
    every?: CompraWhereInput
    some?: CompraWhereInput
    none?: CompraWhereInput
  }

  export type CompraOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CarroCountOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    compradorId?: SortOrder
  }

  export type CarroAvgOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    compradorId?: SortOrder
  }

  export type CarroMaxOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    compradorId?: SortOrder
  }

  export type CarroMinOrderByAggregateInput = {
    id?: SortOrder
    modelo?: SortOrder
    ano?: SortOrder
    compradorId?: SortOrder
  }

  export type CarroSumOrderByAggregateInput = {
    id?: SortOrder
    ano?: SortOrder
    compradorId?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type CarroRelationFilter = {
    is?: CarroWhereInput
    isNot?: CarroWhereInput
  }

  export type CompraCountOrderByAggregateInput = {
    id?: SortOrder
    carroId?: SortOrder
    compradorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
  }

  export type CompraAvgOrderByAggregateInput = {
    id?: SortOrder
    carroId?: SortOrder
    compradorId?: SortOrder
  }

  export type CompraMaxOrderByAggregateInput = {
    id?: SortOrder
    carroId?: SortOrder
    compradorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
  }

  export type CompraMinOrderByAggregateInput = {
    id?: SortOrder
    carroId?: SortOrder
    compradorId?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
  }

  export type CompraSumOrderByAggregateInput = {
    id?: SortOrder
    carroId?: SortOrder
    compradorId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CarroListRelationFilter = {
    every?: CarroWhereInput
    some?: CarroWhereInput
    none?: CarroWhereInput
  }

  export type CarroOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CompradorCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    contato?: SortOrder
  }

  export type CompradorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompradorMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    contato?: SortOrder
  }

  export type CompradorMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    contato?: SortOrder
  }

  export type CompradorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CompradorCreateNestedOneWithoutCarrosInput = {
    create?: XOR<CompradorCreateWithoutCarrosInput, CompradorUncheckedCreateWithoutCarrosInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutCarrosInput
    connect?: CompradorWhereUniqueInput
  }

  export type CompraCreateNestedManyWithoutCarroInput = {
    create?: XOR<Enumerable<CompraCreateWithoutCarroInput>, Enumerable<CompraUncheckedCreateWithoutCarroInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutCarroInput>
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type CompraUncheckedCreateNestedManyWithoutCarroInput = {
    create?: XOR<Enumerable<CompraCreateWithoutCarroInput>, Enumerable<CompraUncheckedCreateWithoutCarroInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutCarroInput>
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompradorUpdateOneWithoutCarrosNestedInput = {
    create?: XOR<CompradorCreateWithoutCarrosInput, CompradorUncheckedCreateWithoutCarrosInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutCarrosInput
    upsert?: CompradorUpsertWithoutCarrosInput
    disconnect?: boolean
    delete?: boolean
    connect?: CompradorWhereUniqueInput
    update?: XOR<CompradorUpdateWithoutCarrosInput, CompradorUncheckedUpdateWithoutCarrosInput>
  }

  export type CompraUpdateManyWithoutCarroNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutCarroInput>, Enumerable<CompraUncheckedCreateWithoutCarroInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutCarroInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutCarroInput>
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutCarroInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutCarroInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CompraUncheckedUpdateManyWithoutCarroNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutCarroInput>, Enumerable<CompraUncheckedCreateWithoutCarroInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutCarroInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutCarroInput>
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutCarroInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutCarroInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type CarroCreateNestedOneWithoutComprasInput = {
    create?: XOR<CarroCreateWithoutComprasInput, CarroUncheckedCreateWithoutComprasInput>
    connectOrCreate?: CarroCreateOrConnectWithoutComprasInput
    connect?: CarroWhereUniqueInput
  }

  export type CompradorCreateNestedOneWithoutComprasInput = {
    create?: XOR<CompradorCreateWithoutComprasInput, CompradorUncheckedCreateWithoutComprasInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutComprasInput
    connect?: CompradorWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CarroUpdateOneRequiredWithoutComprasNestedInput = {
    create?: XOR<CarroCreateWithoutComprasInput, CarroUncheckedCreateWithoutComprasInput>
    connectOrCreate?: CarroCreateOrConnectWithoutComprasInput
    upsert?: CarroUpsertWithoutComprasInput
    connect?: CarroWhereUniqueInput
    update?: XOR<CarroUpdateWithoutComprasInput, CarroUncheckedUpdateWithoutComprasInput>
  }

  export type CompradorUpdateOneRequiredWithoutComprasNestedInput = {
    create?: XOR<CompradorCreateWithoutComprasInput, CompradorUncheckedCreateWithoutComprasInput>
    connectOrCreate?: CompradorCreateOrConnectWithoutComprasInput
    upsert?: CompradorUpsertWithoutComprasInput
    connect?: CompradorWhereUniqueInput
    update?: XOR<CompradorUpdateWithoutComprasInput, CompradorUncheckedUpdateWithoutComprasInput>
  }

  export type CarroCreateNestedManyWithoutCompradorInput = {
    create?: XOR<Enumerable<CarroCreateWithoutCompradorInput>, Enumerable<CarroUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<CarroCreateOrConnectWithoutCompradorInput>
    connect?: Enumerable<CarroWhereUniqueInput>
  }

  export type CompraCreateNestedManyWithoutCompradorInput = {
    create?: XOR<Enumerable<CompraCreateWithoutCompradorInput>, Enumerable<CompraUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutCompradorInput>
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type CarroUncheckedCreateNestedManyWithoutCompradorInput = {
    create?: XOR<Enumerable<CarroCreateWithoutCompradorInput>, Enumerable<CarroUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<CarroCreateOrConnectWithoutCompradorInput>
    connect?: Enumerable<CarroWhereUniqueInput>
  }

  export type CompraUncheckedCreateNestedManyWithoutCompradorInput = {
    create?: XOR<Enumerable<CompraCreateWithoutCompradorInput>, Enumerable<CompraUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutCompradorInput>
    connect?: Enumerable<CompraWhereUniqueInput>
  }

  export type CarroUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<Enumerable<CarroCreateWithoutCompradorInput>, Enumerable<CarroUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<CarroCreateOrConnectWithoutCompradorInput>
    upsert?: Enumerable<CarroUpsertWithWhereUniqueWithoutCompradorInput>
    set?: Enumerable<CarroWhereUniqueInput>
    disconnect?: Enumerable<CarroWhereUniqueInput>
    delete?: Enumerable<CarroWhereUniqueInput>
    connect?: Enumerable<CarroWhereUniqueInput>
    update?: Enumerable<CarroUpdateWithWhereUniqueWithoutCompradorInput>
    updateMany?: Enumerable<CarroUpdateManyWithWhereWithoutCompradorInput>
    deleteMany?: Enumerable<CarroScalarWhereInput>
  }

  export type CompraUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutCompradorInput>, Enumerable<CompraUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutCompradorInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutCompradorInput>
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutCompradorInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutCompradorInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type CarroUncheckedUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<Enumerable<CarroCreateWithoutCompradorInput>, Enumerable<CarroUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<CarroCreateOrConnectWithoutCompradorInput>
    upsert?: Enumerable<CarroUpsertWithWhereUniqueWithoutCompradorInput>
    set?: Enumerable<CarroWhereUniqueInput>
    disconnect?: Enumerable<CarroWhereUniqueInput>
    delete?: Enumerable<CarroWhereUniqueInput>
    connect?: Enumerable<CarroWhereUniqueInput>
    update?: Enumerable<CarroUpdateWithWhereUniqueWithoutCompradorInput>
    updateMany?: Enumerable<CarroUpdateManyWithWhereWithoutCompradorInput>
    deleteMany?: Enumerable<CarroScalarWhereInput>
  }

  export type CompraUncheckedUpdateManyWithoutCompradorNestedInput = {
    create?: XOR<Enumerable<CompraCreateWithoutCompradorInput>, Enumerable<CompraUncheckedCreateWithoutCompradorInput>>
    connectOrCreate?: Enumerable<CompraCreateOrConnectWithoutCompradorInput>
    upsert?: Enumerable<CompraUpsertWithWhereUniqueWithoutCompradorInput>
    set?: Enumerable<CompraWhereUniqueInput>
    disconnect?: Enumerable<CompraWhereUniqueInput>
    delete?: Enumerable<CompraWhereUniqueInput>
    connect?: Enumerable<CompraWhereUniqueInput>
    update?: Enumerable<CompraUpdateWithWhereUniqueWithoutCompradorInput>
    updateMany?: Enumerable<CompraUpdateManyWithWhereWithoutCompradorInput>
    deleteMany?: Enumerable<CompraScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type CompradorCreateWithoutCarrosInput = {
    nome: string
    email: string
    contato: string
    compras?: CompraCreateNestedManyWithoutCompradorInput
  }

  export type CompradorUncheckedCreateWithoutCarrosInput = {
    id?: number
    nome: string
    email: string
    contato: string
    compras?: CompraUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type CompradorCreateOrConnectWithoutCarrosInput = {
    where: CompradorWhereUniqueInput
    create: XOR<CompradorCreateWithoutCarrosInput, CompradorUncheckedCreateWithoutCarrosInput>
  }

  export type CompraCreateWithoutCarroInput = {
    startDate: Date | string
    endDate: Date | string
    status: string
    comprador: CompradorCreateNestedOneWithoutComprasInput
  }

  export type CompraUncheckedCreateWithoutCarroInput = {
    id?: number
    compradorId: number
    startDate: Date | string
    endDate: Date | string
    status: string
  }

  export type CompraCreateOrConnectWithoutCarroInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutCarroInput, CompraUncheckedCreateWithoutCarroInput>
  }

  export type CompradorUpsertWithoutCarrosInput = {
    update: XOR<CompradorUpdateWithoutCarrosInput, CompradorUncheckedUpdateWithoutCarrosInput>
    create: XOR<CompradorCreateWithoutCarrosInput, CompradorUncheckedCreateWithoutCarrosInput>
  }

  export type CompradorUpdateWithoutCarrosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    compras?: CompraUpdateManyWithoutCompradorNestedInput
  }

  export type CompradorUncheckedUpdateWithoutCarrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    compras?: CompraUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type CompraUpsertWithWhereUniqueWithoutCarroInput = {
    where: CompraWhereUniqueInput
    update: XOR<CompraUpdateWithoutCarroInput, CompraUncheckedUpdateWithoutCarroInput>
    create: XOR<CompraCreateWithoutCarroInput, CompraUncheckedCreateWithoutCarroInput>
  }

  export type CompraUpdateWithWhereUniqueWithoutCarroInput = {
    where: CompraWhereUniqueInput
    data: XOR<CompraUpdateWithoutCarroInput, CompraUncheckedUpdateWithoutCarroInput>
  }

  export type CompraUpdateManyWithWhereWithoutCarroInput = {
    where: CompraScalarWhereInput
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyWithoutComprasInput>
  }

  export type CompraScalarWhereInput = {
    AND?: Enumerable<CompraScalarWhereInput>
    OR?: Enumerable<CompraScalarWhereInput>
    NOT?: Enumerable<CompraScalarWhereInput>
    id?: IntFilter | number
    carroId?: IntFilter | number
    compradorId?: IntFilter | number
    startDate?: DateTimeFilter | Date | string
    endDate?: DateTimeFilter | Date | string
    status?: StringFilter | string
  }

  export type CarroCreateWithoutComprasInput = {
    modelo: string
    ano: number
    comprador?: CompradorCreateNestedOneWithoutCarrosInput
  }

  export type CarroUncheckedCreateWithoutComprasInput = {
    id?: number
    modelo: string
    ano: number
    compradorId?: number | null
  }

  export type CarroCreateOrConnectWithoutComprasInput = {
    where: CarroWhereUniqueInput
    create: XOR<CarroCreateWithoutComprasInput, CarroUncheckedCreateWithoutComprasInput>
  }

  export type CompradorCreateWithoutComprasInput = {
    nome: string
    email: string
    contato: string
    carros?: CarroCreateNestedManyWithoutCompradorInput
  }

  export type CompradorUncheckedCreateWithoutComprasInput = {
    id?: number
    nome: string
    email: string
    contato: string
    carros?: CarroUncheckedCreateNestedManyWithoutCompradorInput
  }

  export type CompradorCreateOrConnectWithoutComprasInput = {
    where: CompradorWhereUniqueInput
    create: XOR<CompradorCreateWithoutComprasInput, CompradorUncheckedCreateWithoutComprasInput>
  }

  export type CarroUpsertWithoutComprasInput = {
    update: XOR<CarroUpdateWithoutComprasInput, CarroUncheckedUpdateWithoutComprasInput>
    create: XOR<CarroCreateWithoutComprasInput, CarroUncheckedCreateWithoutComprasInput>
  }

  export type CarroUpdateWithoutComprasInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    comprador?: CompradorUpdateOneWithoutCarrosNestedInput
  }

  export type CarroUncheckedUpdateWithoutComprasInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    compradorId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CompradorUpsertWithoutComprasInput = {
    update: XOR<CompradorUpdateWithoutComprasInput, CompradorUncheckedUpdateWithoutComprasInput>
    create: XOR<CompradorCreateWithoutComprasInput, CompradorUncheckedCreateWithoutComprasInput>
  }

  export type CompradorUpdateWithoutComprasInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    carros?: CarroUpdateManyWithoutCompradorNestedInput
  }

  export type CompradorUncheckedUpdateWithoutComprasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    contato?: StringFieldUpdateOperationsInput | string
    carros?: CarroUncheckedUpdateManyWithoutCompradorNestedInput
  }

  export type CarroCreateWithoutCompradorInput = {
    modelo: string
    ano: number
    compras?: CompraCreateNestedManyWithoutCarroInput
  }

  export type CarroUncheckedCreateWithoutCompradorInput = {
    id?: number
    modelo: string
    ano: number
    compras?: CompraUncheckedCreateNestedManyWithoutCarroInput
  }

  export type CarroCreateOrConnectWithoutCompradorInput = {
    where: CarroWhereUniqueInput
    create: XOR<CarroCreateWithoutCompradorInput, CarroUncheckedCreateWithoutCompradorInput>
  }

  export type CompraCreateWithoutCompradorInput = {
    startDate: Date | string
    endDate: Date | string
    status: string
    carro: CarroCreateNestedOneWithoutComprasInput
  }

  export type CompraUncheckedCreateWithoutCompradorInput = {
    id?: number
    carroId: number
    startDate: Date | string
    endDate: Date | string
    status: string
  }

  export type CompraCreateOrConnectWithoutCompradorInput = {
    where: CompraWhereUniqueInput
    create: XOR<CompraCreateWithoutCompradorInput, CompraUncheckedCreateWithoutCompradorInput>
  }

  export type CarroUpsertWithWhereUniqueWithoutCompradorInput = {
    where: CarroWhereUniqueInput
    update: XOR<CarroUpdateWithoutCompradorInput, CarroUncheckedUpdateWithoutCompradorInput>
    create: XOR<CarroCreateWithoutCompradorInput, CarroUncheckedCreateWithoutCompradorInput>
  }

  export type CarroUpdateWithWhereUniqueWithoutCompradorInput = {
    where: CarroWhereUniqueInput
    data: XOR<CarroUpdateWithoutCompradorInput, CarroUncheckedUpdateWithoutCompradorInput>
  }

  export type CarroUpdateManyWithWhereWithoutCompradorInput = {
    where: CarroScalarWhereInput
    data: XOR<CarroUpdateManyMutationInput, CarroUncheckedUpdateManyWithoutCarrosInput>
  }

  export type CarroScalarWhereInput = {
    AND?: Enumerable<CarroScalarWhereInput>
    OR?: Enumerable<CarroScalarWhereInput>
    NOT?: Enumerable<CarroScalarWhereInput>
    id?: IntFilter | number
    modelo?: StringFilter | string
    ano?: IntFilter | number
    compradorId?: IntNullableFilter | number | null
  }

  export type CompraUpsertWithWhereUniqueWithoutCompradorInput = {
    where: CompraWhereUniqueInput
    update: XOR<CompraUpdateWithoutCompradorInput, CompraUncheckedUpdateWithoutCompradorInput>
    create: XOR<CompraCreateWithoutCompradorInput, CompraUncheckedCreateWithoutCompradorInput>
  }

  export type CompraUpdateWithWhereUniqueWithoutCompradorInput = {
    where: CompraWhereUniqueInput
    data: XOR<CompraUpdateWithoutCompradorInput, CompraUncheckedUpdateWithoutCompradorInput>
  }

  export type CompraUpdateManyWithWhereWithoutCompradorInput = {
    where: CompraScalarWhereInput
    data: XOR<CompraUpdateManyMutationInput, CompraUncheckedUpdateManyWithoutComprasInput>
  }

  export type CompraUpdateWithoutCarroInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    comprador?: CompradorUpdateOneRequiredWithoutComprasNestedInput
  }

  export type CompraUncheckedUpdateWithoutCarroInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CompraUncheckedUpdateManyWithoutComprasInput = {
    id?: IntFieldUpdateOperationsInput | number
    compradorId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type CarroUpdateWithoutCompradorInput = {
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    compras?: CompraUpdateManyWithoutCarroNestedInput
  }

  export type CarroUncheckedUpdateWithoutCompradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
    compras?: CompraUncheckedUpdateManyWithoutCarroNestedInput
  }

  export type CarroUncheckedUpdateManyWithoutCarrosInput = {
    id?: IntFieldUpdateOperationsInput | number
    modelo?: StringFieldUpdateOperationsInput | string
    ano?: IntFieldUpdateOperationsInput | number
  }

  export type CompraUpdateWithoutCompradorInput = {
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    carro?: CarroUpdateOneRequiredWithoutComprasNestedInput
  }

  export type CompraUncheckedUpdateWithoutCompradorInput = {
    id?: IntFieldUpdateOperationsInput | number
    carroId?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}